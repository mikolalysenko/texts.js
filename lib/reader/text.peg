Document
  = blocks:(b:Block BlockEnd { return b; })*
  { return ['text'].concat(blocks); }

Block
  = Heading
  / Verbatim
  / Divider
  / Para
  / Empty

/*
  / Formula
  / Quote
  / Bulleted
  / Numbered
  / Image
  / Note
  / Table
*/

Inline
  = Code
  / Strong
  / Emph
  / Label
  / Url
  / Plain

/******************************* Basic elements *************************************/

EOF
  = !.

EOL
  = '\n' / '\r' '\n'?

BlockEnd
  = (EOL EOL) / (EOL EOF)

Break
  = '  ' EOL
  { return ['break', '\n']; }

Indent
  = '    '

Tildes
  = '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

Dashes
  = '--------------------------------------------------------------------------------'

/*********************************** Blocks *****************************************/

/*** Headings ***/

Heading
  = Heading1
  / Heading2
  / Heading3

Heading1
  = inlines:Inline+ Heading1Bottom
  { return ['heading', { 'level': 1 }].concat(inlines); }

Heading1Bottom
  = EOL '='+ &BlockEnd

Heading2
  = inlines:Inline+ Heading2Bottom
  { return ['heading', { 'level': 2 }].concat(inlines); }

Heading2Bottom
  = EOL '-'+ &BlockEnd

Heading3
  = '### ' inlines:Inline+
  { return ['heading', { 'level': 3 }].concat(inlines); }

/*** Verbatim ***/

Verbatim
  = Tildes EOL inlines:(VerbatimLine / VerbatimBreak)* EOL Tildes
  { return ['verbatim', { 'level': 0 }].concat(inlines); }

VerbatimLine
  = !Tildes chars:(!EOL c:. { return c; })+
  { return ['plain', chars.join('')]; };

VerbatimBreak
  = !(EOL Tildes) EOL
  { return ['break', '\n']; }

/*** Others ***/

Divider
  = Dashes
  { return ['divider', { 'level': 0 }]; }  

Para
  = indents:Indent* inlines:(Inline / Break)+
  { return ['para', { 'level': indents.length }].concat(inlines); }

Empty
  = &BlockEnd
  { return ['para', { 'level': 0 }]; }

/************************************ Inlines ***************************************/

Code
  = '`' chars:(!'`' c:Char { return c; })+ '`'
  { return ['code', chars.join('')]; };

Strong
  = '**' chars:(!'**' c:Char { return c; })+ '**'
  { return ['strong', chars.join('')]; };

Emph
  = '*' chars:(!'*' c:Char { return c; })+ '*'
  { return ['emph', chars.join('')]; };

Label
  = '[' chars:(!']' c:Char { return c; })+ ']'
  { return ['label', chars.join('')]; };

Url
  = '<' chars:(!'>' c:Char { return c; })+ '>'
  { return ['url', chars.join('')]; };

Plain
  = chars:(!'`' !'*' !'[' !'<' c:Char { return c; })+
  { return ['plain', chars.join('')]; };

Char
  = !Heading1Bottom
    !Heading2Bottom
    !BlockEnd
    !Break
  c:( '\\*' { return '*'; }
    / '\\`' { return '`'; }
    / '\\<' { return '<'; }
    / '\\>' { return '>'; }
    / '\\[' { return '['; }
    / '\\]' { return ']'; }
    / '\\\\' { return '\\'; }
    / (EOL Indent*) { return ' '; }
    / c:.  { return c; }
  ) { return c; }
