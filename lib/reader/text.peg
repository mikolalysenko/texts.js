Document
  = blocks:(b:Block BlockEnd { return b; })*
  { return [].concat.apply(['text'], blocks); }

Block
  = Heading
  / Verbatim
  / Formula
  / Divider
  / Table
  / Note
  / Image
  / Bulleted
  / Numbered
  / Para
  / Empty

/*
  / Quote
*/

Inline
  = Code
  / Strong
  / Emph
  / Label
  / Url
  / Math
  / Plain

/******************************* Basic elements *************************************/

EOF
  = !.

EOL
  = '\n' / '\r' '\n'?

BlockEnd
  = (EOL EOL) / (EOL EOF)

Break
  = '  ' EOL
  { return ['break', '\n']; }

Indent
  = '    '

Tildes
  = '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

Dashes
  = '--------------------------------------------------------------------------------'

/*********************************** Blocks *****************************************/

/*** Headings ***/

Heading
  = Heading1
  / Heading2
  / Heading3

Heading1
  = inlines:Inline+ Heading1Bottom
  { return [['heading', { 'level': 1 }].concat(inlines)]; }

Heading1Bottom
  = EOL '='+ &BlockEnd

Heading2
  = inlines:Inline+ Heading2Bottom
  { return [['heading', { 'level': 2 }].concat(inlines)]; }

Heading2Bottom
  = EOL '-'+ &BlockEnd

Heading3
  = '### ' inlines:Inline+
  { return [['heading', { 'level': 3 }].concat(inlines)]; }

/*** Verbatim ***/

Verbatim
  = Tildes EOL inlines:(VerbatimLine / VerbatimBreak)* EOL Tildes
  { return [['verbatim', { 'level': 0 }].concat(inlines)]; }

VerbatimLine
  = !Tildes chars:(!EOL c:. { return c; })+
  { return ['plain', chars.join('')]; };

VerbatimBreak
  = !(EOL Tildes) EOL
  { return ['break', '\n']; }

/*** Formula ***/

Formula
  = '$$' EOL inlines:(FormulaLine / FormulaBreak)* EOL '$$'
  { return [['formula', { 'level': 0 }].concat(inlines)]; }

FormulaLine
  = !'$$' chars:(!EOL c:. { return c; })+
  { return ['plain', chars.join('')]; };

FormulaBreak
  = !(EOL '$$') EOL
  { return ['break', '\n']; }

/*** Lists ***/

Bulleted
  = indents:Indent*  '* ' inlines:(Inline / Break)+
  { return [['item', { 'level': indents.length + 1 }].concat(inlines)]; }

Numbered
  = indents:Indent*  Digit+ '. ' inlines:(Inline / Break)+
  { return [['numitem', { 'level': indents.length + 1 }].concat(inlines)]; }

Digit
  = [0-9]

/*** Others ***/

Divider
  = Dashes
  { return [['divider', { 'level': 0 }]]; }  

Para
  = indents:Indent* inlines:(Inline / Break)+
  { return [['para', { 'level': indents.length }].concat(inlines)]; }

Note
  = label:Label ': ' inlines:(Inline / Break)+
  { return [['note', { 'level': 0 }, label].concat(inlines)]; }

Image
  = '![](' url:Url ')'
  { return [['image', { 'level': 0 }, url ]]; }

Empty
  = &BlockEnd
  { return [['para', { 'level': 0 }]]; }

/*** Tables ***/

Table
  = rows:TableRow+ TableDivider
  { return [].concat.apply([], rows); }

TableDivider
  = '+' ('-'+ '+')+

TableRow
  = TableDivider EOL lines:TableLine+
  {
    var cells = [];
    lines.forEach(function (line) {
      line.forEach(function (cell, index) {
        cells[index] = ((cells[index] || '') + ' ' + cell.trim()).trim();
      });
    });
    
    var row = []
    row.push(['row', { 'level': 1 }, ['plain', cells.shift()] ]);
    cells.forEach(function (cell) {
      row.push(['col', { 'level': 2 }, ['plain', cell] ]);
    });
    return row;
  }

TableLine
  = '|' cells:(TableCellLine)+ EOL
  { return cells; }

TableCellLine
  = chars:(!'|' !EOL c:. { return c; })+ '|'
  { return chars.join(''); }

/************************************ Inlines ***************************************/

Code
  = '`' chars:(!'`' c:Char { return c; })+ '`'
  { return ['code', chars.join('')]; };

Strong
  = '**' chars:(!'**' c:Char { return c; })+ '**'
  { return ['strong', chars.join('')]; };

Emph
  = '*' chars:(!'*' c:Char { return c; })+ '*'
  { return ['emph', chars.join('')]; };

Label
  = '[' chars:(!']' c:Char { return c; })+ ']'
  { return ['label', chars.join('')]; };

Url
  = '<' chars:(!'>' c:Char { return c; })+ '>'
  { return ['url', chars.join('')]; };

Math
  = '$' chars:(!'$' c:Char { return c; })+ '$'
  { return ['math', chars.join('')]; };

Plain
  = chars:(!Code !Strong !Emph !Label !Url !Math c:Char { return c; })+
  { return ['plain', chars.join('')]; };

Char
  = !Heading1Bottom
    !Heading2Bottom
    !BlockEnd
    !Break
  c:( ('\\' s:Special) { return s; }
    / (EOL Indent*) { return ' '; }
    / c:.  { return c; }
  ) { return c; }

Special
  = [*`<>$\\[\]]
