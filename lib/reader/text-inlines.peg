Inlines
  = inlines:Inline+
  { return [].concat.apply([], inlines); }

Inline
  = Code
  / Strong
  / Emph
  / LinkInline
  / NoteRef
  / LinkRef
  / Url
  / Math
  / Plain

Code
  = '`' chars:(!'`' c:Char { return c; })+ '`'
  { return [['code', chars.join('')]]; };

Strong
  = '**' chars:(!'**' c:Char { return c; })+ '**'
  { return [['strong', chars.join('')]]; };

Emph
  = '*' chars:(!'*' c:Char { return c; })+ '*'
  { return [['emph', chars.join('')]]; };

LinkInline
  = '[' text:(!']' c:Char { return c; })+ ']'
    '(' '<'?  url:(!'>)' !')' c:Char { return c; })+ '>'? ')'
  { return [['linktext', text.join('')], ['url', url.join('')]]; };

LinkRef
  = '[' text:(!']' c:Char { return c; })+ ']'
    '[' !'^' ref:(!']' c:Char { return c; })+ ']'
  { return [['linktext', text.join('')], ['linkref', ref.join('')]]; };

NoteRef
  = '[^' ref:(!']' c:Char { return c; })+ ']'
  { return [['noteref', ref.join('')]]; };

Url
  = '<' chars:(!'>' c:Char { return c; })+ '>'
  { return [['url', chars.join('')]]; };

Math
  = '$' chars:(!'$' c:Char { return c; })+ '$'
  { return [['math', chars.join('')]]; };

Plain
  = chars:(!Code !Strong !Emph !LinkInline !NoteRef !LinkRef !Url !Math c:Char { return c; })+
  { return [['plain', chars.join('')]]; };

Char
  =
  c:( ('\\' s:Special) { return s; }
    / c:.  { return c; }
  ) { return c; }

Special
  = [*`<>$\\[\]]
