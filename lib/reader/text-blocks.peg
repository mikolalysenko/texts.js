Blocks
  = blocks:(b:Block BlockEnd { return b; })*
  { return [].concat.apply([], blocks); }

Block
  = Heading
  / Verbatim
  / Formula
  / Divider
  / Table
  / Note
  / Link
  / Image
  / Bulleted
  / Numbered
  / Quote
  / Para
  / Empty

InlinesWithBreaks
  = inlines:(Inline / Break)+
  { return inlines; }

/******************************* Basic elements *************************************/

EOF
  = !.

EOL
  = '\n' / '\r' '\n'?

BlockEnd
  = (EOL EOL) / (EOL EOF)

Break
  = '  ' EOL
  { return ['break', '\n']; }

Indent
  = '    '

Inline
  = chars:Char+
  { return chars.join(''); };

Char
  = !Heading1Bottom !Heading2Bottom !BlockEnd !Break
  c:( (EOL Indent*) { return ' '; }
    / c:.  { return c; }
  ) { return c; }

Tildes
  = '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

Dashes
  = '--------------------------------------------------------------------------------'

/*********************************** Blocks *****************************************/

/*** Headings ***/

Heading
  = Heading1
  / Heading2
  / Heading3

Heading1
  = inlines:Inline Heading1Bottom
  { return [['heading', { 'level': 1 }, inlines]]; }

Heading1Bottom
  = EOL '='+ &BlockEnd

Heading2
  = inlines:Inline Heading2Bottom
  { return [['heading', { 'level': 2 }, inlines]]; }

Heading2Bottom
  = EOL '-'+ &BlockEnd

Heading3
  = '### ' inlines:Inline
  { return [['heading', { 'level': 3 }, inlines]]; }

/*** Verbatim ***/

Verbatim
  = Tildes EOL inlines:(VerbatimLine / VerbatimBreak)* EOL Tildes
  { return [['verbatim', { 'level': 0 }].concat(inlines)]; }

VerbatimLine
  = !Tildes chars:(!EOL c:. { return c; })+
  { return ['plain', chars.join('')]; };

VerbatimBreak
  = !(EOL Tildes) EOL
  { return ['break', '\n']; }

/*** Formula ***/

Formula
  = '$$' EOL inlines:(FormulaLine / FormulaBreak)* EOL '$$'
  { return [['formula', { 'level': 0 }].concat(inlines)]; }

FormulaLine
  = !'$$' chars:(!EOL c:. { return c; })+
  { return ['plain', chars.join('')]; };

FormulaBreak
  = !(EOL '$$') EOL
  { return ['break', '\n']; }

/*** Lists ***/

Bulleted
  = indents:Indent*  '  * ' inlines:InlinesWithBreaks
  { return [['item', { 'level': indents.length + 1 }].concat(inlines)]; }

Numbered
  = indents:Indent*  (' ' / Digit) Digit+ '. ' inlines:InlinesWithBreaks
  { return [['numitem', { 'level': indents.length + 1 }].concat(inlines)]; }

Digit
  = [0-9]

/*** Others ***/

Divider
  = Dashes
  { return [['divider', { 'level': 0 }]]; }  

Para
  = indents:Indent* inlines:InlinesWithBreaks
  { return [['para', { 'level': indents.length }].concat(inlines)]; }

Note
  = label:NoteLabel inlines:InlinesWithBreaks
  { return [['note', { 'level': 0 }, label].concat(inlines)]; }

NoteLabel
  = '[^' chars:(!']' !EOL c:. { return c; })+ ']: '
  { return ['id', chars.join('')]; };

Link
  = label:LinkLabel inlines:InlinesWithBreaks
  { return [['link', { 'level': 0 }, label].concat(inlines)]; }

LinkLabel
  = '[' !'^' chars:(!']' !EOL c:. { return c; })+ ']: '
  { return ['id', chars.join('')]; };

Image
  = '![](<' url:(!'>' !EOL c:. { return c; })+ '>)'
  { return [['image', { 'level': 0 }, ['url', url.join('')] ]]; }

Empty
  = &BlockEnd
  { return [['para', { 'level': 0 }]]; }

/*** Quotes ***/

Quote
  = &'> ' inlines:(QuoteInline / Break)+
  { return [['quote', { 'level': 1 }].concat(inlines)]; }

QuoteInline
  = lines:('> ' chars:QuoteChar+ { return chars.join(''); })+
  { return lines.join(''); }

QuoteChar
  = !BlockEnd !Break
  c:( (EOL Indent* '> ') { return ' '; }
    / c:.  { return c; }
  ) { return c; }

/*** Tables ***/

Table
  = rows:TableRow+ TableDivider
  { return [].concat.apply([], rows); }

TableDivider
  = '+' ('-'+ '+')+

TableRow
  = TableDivider EOL lines:TableLine+
  {
    var cells = [];
    lines.forEach(function (line) {
      line.forEach(function (cell, index) {
        cells[index] = ((cells[index] || '') + ' ' + cell.trim()).trim();
      });
    });
    
    var row = []
    row.push(['row', { 'level': 1 }, cells.shift() ]);
    cells.forEach(function (cell) {
      row.push(['col', { 'level': 2 }, cell ]);
    });
    return row;
  }

TableLine
  = '|' cells:(TableCellLine)+ EOL
  { return cells; }

TableCellLine
  = chars:(!'|' !EOL c:. { return c; })+ '|'
  { return chars.join(''); }
